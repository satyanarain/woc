{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/extends","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/toArray","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"isAsync":false}},{"name":"path-to-regexp","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = exports.matchPath = void 0;\n\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/defineProperty\"));\n\n  var _extends3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/extends\"));\n\n  var _toArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/toArray\"));\n\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/slicedToArray\"));\n\n  var _pathToRegexp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"path-to-regexp\"));\n\n  var compilePathToRegex = function compilePathToRegex(path) {\n    var keys = [];\n    var re = (0, _pathToRegexp.default)(path, keys);\n    return {\n      re: re,\n      keys: keys\n    };\n  };\n\n  var matchPath = function matchPath(path, url) {\n    var _url$split = url.split('?'),\n        _url$split2 = (0, _slicedToArray2.default)(_url$split, 1),\n        urlCleaned = _url$split2[0];\n\n    var urlToMatch = !urlCleaned.endsWith('/') ? urlCleaned + \"/\" : urlCleaned;\n\n    var _compilePathToRegex = compilePathToRegex(path),\n        re = _compilePathToRegex.re,\n        keys = _compilePathToRegex.keys;\n\n    var match = re.exec(urlToMatch);\n\n    if (!match) {\n      return null;\n    }\n\n    var _match = (0, _toArray2.default)(match),\n        compiledUrl = _match[0],\n        values = _match.slice(1);\n\n    if (urlToMatch !== compiledUrl) {\n      return null;\n    }\n\n    var params = keys.reduce(function (acc, key, index) {\n      return (0, _extends3.default)({}, acc, (0, _defineProperty2.default)({}, key.name, values[index]));\n    }, {});\n    return {\n      path: path,\n      params: params\n    };\n  };\n\n  exports.matchPath = matchPath;\n\n  var pathParser = function pathParser(url) {\n    var possibleMatchingpaths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return possibleMatchingpaths.map(function (path) {\n      return matchPath(path, url);\n    }).find(function (obj) {\n      return obj;\n    });\n  };\n\n  var _default = pathParser;\n  exports.default = _default;\n});","map":[[17,0,1,0],[19,0,33,0],[19,6,33,6,"compilePathToRegex"],[19,24,33,24],[19,27,33,27],[19,36,33,6,"compilePathToRegex"],[19,54,33,27],[19,55,33,28,"path"],[19,59,33,27],[19,61,33,37],[20,0,34,2],[20,8,34,8,"keys"],[20,12,34,12],[20,15,34,15],[20,17,34,2],[21,0,35,2],[21,8,35,8,"re"],[21,10,35,10],[21,13,35,13],[21,40,35,26,"path"],[21,44,35,13],[21,46,35,32,"keys"],[21,50,35,13],[21,51,35,2],[22,0,38,2],[22,11,38,9],[23,0,38,11,"re"],[23,6,38,11,"re"],[23,8,38,13],[23,10,38,11,"re"],[23,12,38,9],[24,0,38,15,"keys"],[24,6,38,15,"keys"],[24,10,38,19],[24,12,38,15,"keys"],[25,0,38,9],[25,5,38,2],[26,0,39,1],[26,3,33,0],[28,0,67,7],[28,6,67,13,"matchPath"],[28,15,67,22],[28,18,67,25],[28,27,67,13,"matchPath"],[28,36,67,25],[28,37,67,26,"path"],[28,41,67,25],[28,43,67,32,"url"],[28,46,67,25],[28,48,67,40],[29,0,67,40],[29,21,70,23,"url"],[29,24,70,26],[29,25,70,27,"split"],[29,30,70,23],[29,31,70,33],[29,34,70,23],[29,35,67,40],[30,0,67,40],[31,0,67,40],[31,8,70,9,"urlCleaned"],[31,18,67,40],[33,0,73,2],[33,8,73,8,"urlToMatch"],[33,18,73,18],[33,21,73,21],[33,22,73,22,"urlCleaned"],[33,32,73,32],[33,33,73,33,"endsWith"],[33,41,73,22],[33,42,73,42],[33,45,73,22],[33,46,73,21],[33,49,73,52,"urlCleaned"],[33,59,73,21],[33,68,73,68,"urlCleaned"],[33,78,73,2],[35,0,67,40],[35,30,76,23,"compilePathToRegex"],[35,48,76,41],[35,49,76,42,"path"],[35,53,76,41],[35,54,67,40],[36,0,67,40],[36,8,76,10,"re"],[36,10,67,40],[36,33,76,10,"re"],[36,35,67,40],[37,0,67,40],[37,8,76,14,"keys"],[37,12,67,40],[37,35,76,14,"keys"],[37,39,67,40],[39,0,79,2],[39,8,79,8,"match"],[39,13,79,13],[39,16,79,16,"re"],[39,18,79,18],[39,19,79,19,"exec"],[39,23,79,16],[39,24,79,24,"urlToMatch"],[39,34,79,16],[39,35,79,2],[41,0,82,2],[41,8,82,6],[41,9,82,7,"match"],[41,14,82,2],[41,16,82,14],[42,0,83,4],[42,13,83,11],[42,17,83,4],[43,0,84,3],[45,0,67,40],[45,40,88,35,"match"],[45,45,67,40],[46,0,67,40],[46,8,88,9,"compiledUrl"],[46,19,67,40],[47,0,67,40],[47,8,88,25,"values"],[47,14,67,40],[49,0,92,2],[49,8,92,6,"urlToMatch"],[49,18,92,16],[49,23,92,21,"compiledUrl"],[49,34,92,2],[49,36,92,34],[50,0,93,4],[50,13,93,11],[50,17,93,4],[51,0,94,3],[53,0,96,2],[53,8,96,8,"params"],[53,14,96,14],[53,17,96,17,"keys"],[53,21,96,21],[53,22,96,22,"reduce"],[53,28,96,17],[53,29,96,29],[53,39,96,30,"acc"],[53,42,96,29],[53,44,96,35,"key"],[53,47,96,29],[53,49,96,40,"index"],[53,54,96,29],[54,0,96,29],[54,13,96,50],[54,36,96,64],[54,38,96,50],[54,40,96,68,"acc"],[54,43,96,50],[54,79,96,76,"key"],[54,82,96,79],[54,83,96,80,"name"],[54,87,96,50],[54,89,96,87,"values"],[54,95,96,93],[54,96,96,94,"index"],[54,101,96,93],[54,102,96,50],[54,104,96,29],[55,0,96,29],[55,5,96,17],[55,7,96,105],[55,9,96,17],[55,10,96,2],[56,0,98,2],[56,11,98,9],[57,0,98,11,"path"],[57,6,98,11,"path"],[57,10,98,15],[57,12,98,11,"path"],[57,16,98,9],[58,0,98,17,"params"],[58,6,98,17,"params"],[58,12,98,23],[58,14,98,17,"params"],[59,0,98,9],[59,5,98,2],[60,0,99,1],[60,3,67,7],[64,0,111,0],[64,6,111,6,"pathParser"],[64,16,111,16],[64,19,111,19],[64,28,111,6,"pathParser"],[64,38,111,19],[64,39,111,20,"url"],[64,42,111,19],[65,0,111,19],[65,8,111,25,"possibleMatchingpaths"],[65,29,111,19],[65,100,111,49],[65,102,111,19],[66,0,111,19],[66,11,111,56,"possibleMatchingpaths"],[66,32,111,77],[66,33,111,78,"map"],[66,36,111,56],[66,37,111,82],[66,47,111,82,"path"],[66,51,111,86],[67,0,111,86],[67,13,111,90,"matchPath"],[67,22,111,99],[67,23,111,100,"path"],[67,27,111,99],[67,29,111,106,"url"],[67,32,111,99],[67,33,111,86],[68,0,111,86],[68,5,111,56],[68,7,111,112,"find"],[68,11,111,56],[68,12,111,117],[68,22,111,117,"obj"],[68,25,111,120],[69,0,111,120],[69,13,111,124,"obj"],[69,16,111,120],[70,0,111,120],[70,5,111,56],[70,6,111,19],[71,0,111,19],[71,3,111,0],[73,17,113,15,"pathParser"],[73,27]]},"type":"js/module"}]}